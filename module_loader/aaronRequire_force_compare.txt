aaronRequire.js没有通过script标签去请求对应模块的文件，这边该问题该怎么解决？
答：它是一次性把所有的js文件都请求过来，然后执行我们自己写的一系列模块文件，调用库文件aaronRequire.js处理模块文件。

aaronRequire.js和force.js，他们模块化加载的异同点：
1. aaronRequire.js它加载模块的原理：它不会在define一个模块的时候去加载它的依赖模块及本身的callback的执行，
它只有在require某个模块时，才会加载该模块及该模块加载所依赖的模块。define模块时，只会记录下该模块的相关信息，
包括，module[id],module[factory],module[deps].注意：该库中的factory，本人认为就可以理解为callback。

   force.js加载模块原理：define某个模块时，它会先检查它的依赖项是否已经完全加载，如果已完全加载，则直接注册该模块即可；
否则，需要根据依赖项数组，一旦判定某个依赖项未加载，则放入callbacks队列中。require某个模块时，如果依赖项都已完全加载，则直接执行callback即可；
否则，需要根据依赖项数组，一旦判定某个依赖项未加载，同define，放入callbacks队列中，但是与define不同的时，使用true或false来区分define还是require。
define和require的一个共同点是，只要遇到某个模块就会去请求（通过script）。当register某个模块的时候，每register一个模块，它都会去循环一次callbacks队列，
看其中是否有可以执行的callback（即加载依赖模块都已加载的模块）。这样性能上会比较差。
   个人认为：方案一：是不是可以在define某个模块的时候，依据依赖项，逐个加载它的依赖项，等所有都加载完毕，它就可以执行本模块的callback。
对于require，也是加载依赖项，等所有依赖项都加载完毕，执行其callback。这样就省得一个个callback队列去循环了。

   其实force.js加载模块原理是预加载，它会在define时，就加载该模块以及其依赖模块，而不是等到真正需要require的时候才去加载（即执行callback）。这是与aaronRequire.js的最大区别。


2. force.js，它是通过方式：    <script src="force.js" data-main="demo"></script>，将demo.js文件加载，相当于一个入口文件（模块）。
在该模块中，我们可以require所需要的模块及define模块
   而aaronRequire.js，只要通过一个script请求将所有的js文件请求过来就好。
